<?xml version="1.0" encoding="UTF-8"?>
<!--
  This file is part of CeeFIT.

  CeeFIT is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  CeeFIT is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with CeeFIT; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  (c)2005 Woldrich, Inc.  http://www.woldrich.com
-->
<project name="Build CeeFit" default="help" basedir=".">
	<!-- import properties from environment variables -->
	<property environment="env"/>
	
	<!-- bring in user defined build.properties file (see build.properties.example for ideas) -->
	<property file="build.properties"/>

      <!-- The name of the current version of CeeFIT -->	
      <property name="product.name" value="CeeFIT-1.1.2"/>
      
	<!-- Bring in the ant-contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir="lib/ant-contrib/lib" casesensitive="false">
				<include name="**/*.jar"/>
				<include name="**/*.zip"/>
			</fileset>
		</classpath>
	</taskdef>
	
	<!-- Bring in the cpptasks -->
	<taskdef resource="cpptasks.tasks">
		<classpath>
			<fileset dir="lib/cpptasks-1.0b3" casesensitive="false">
				<include name="**/*.jar"/>
				<include name="**/*.zip"/>
			</fileset>
		</classpath>
	</taskdef>
	
	<!-- Bring in the types for the cpptasks -->
	<typedef resource="cpptasks.types">
		<classpath>
			<fileset dir="lib/cpptasks-1.0b3" casesensitive="false">
				<include name="**/*.jar"/>
				<include name="**/*.zip"/>
			</fileset>
		</classpath>
	</typedef>
	
	<!-- Help -->
	<target name="help">
		<echo message="Build CeeFIT"/>
		<echo message="  Description:"/>
		<echo message="      Build the lib files and test program(s) that make up CeeFIT"/>
		<echo message="  Targets:"/>
		<echo message="      clean             = Delete all intermediate targets and binaries"/>
		<echo message="      build             = Build all code"/>
		<echo message="      test              = Run the fitspec program on the Fit Specification files"/>
		<echo message="      all               = Build all code and run the fitspec program on the Fit Specification files"/>
	</target>

	<!-- Target for cleaning all build directories and temporary files created during build -->
	<target name="clean">
		<delete failonerror="false" dir="Debug"/>
		<delete failonerror="false" dir="Release"/>
		<delete failonerror="false" dir="FastCompile"/>
	</target>
	
	<!-- have a build.properties file in the same folder as build.xml if you need to override the default project settings -->
	<property file="build.properties"/>
	
	<target name="build-init">
		<if>
			<not>
				<isset property="which.compiler"/>
			</not>
			<then>
				<property name="which.compiler" value="g++"/>
			</then>
		</if>
		<if>
			<not>
				<isset property="which.linker"/>
			</not>
			<then>
				<property name="which.linker" value="${which.compiler}"/>
			</then>
		</if>
		<if>
			<not>
				<isset property="debug.mode"/>
			</not>
			<then>
				<property name="debug.mode" value="true"/>
			</then>
			<else/>
		</if>
		<if>
			<not>
				<isset property="release.mode"/>
			</not>
			<then>
				<property name="release.mode" value="false"/>
			</then>
			<else/>
		</if>
		<if>
			<not>
				<isset property="incremental.compile"/>
			</not>
			<then>
				<property name="incremental.compile" value="${debug.mode}"/>
			</then>
		</if>
		<if>
			<not>
				<isset property="intel.target"/>
			</not>
			<then>
				<property name="intel.target" value="true"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${which.compiler}" arg2="gcc"/>
				<equals arg1="${which.compiler}" arg2="g++"/>
				<equals arg1="${which.compiler}" arg2="c++"/>
			</or>
			<then>
				<property name="using.gcc" value="true"/>
				<if>
					<equals arg1="${intel.target}" arg2="true"/>
					<then>
						<property name="using.gcc.on.intel" value="true"/>
					</then>
				</if>
			</then>
		</if>
		<if>
		    <equals arg1="${which.compiler}" arg2="bcc"/>
		    <then>
		        <property name="using.bcc" value="true"/>
		        <if>
    		            <equals arg1="${debug.mode}" arg2="true"/>
        			<then>
        				<property name="using.bcc.debug.mode" value="true"/>
        			</then>
		        </if>
		    </then>
		</if>
		<if>
			<equals arg1="${which.compiler}" arg2="msvc"/>
			<then>
				<property name="using.msvc" value="true"/>
			</then>
		</if>
		<if>
                    <available file="${env.GCC_INCLUDE}/sys/io.h"/>
                    <then>
                            <property name="io.h.in.sys" value="true"/>
                    </then>
		</if>
		<if>
                    <available file="${env.GCC_INCLUDE}/glob.h"/>
                    <then>
                          <property name="glob.h.was.found" value="true"/>
                    </then>
		</if>
		<if>
                    <available file="${env.GCC_INCLUDE}/glob.h"/>
                    <then>
                          <property name="glob.h.was.found" value="true"/>
                    </then>
		</if>
		<if>
			<os family="windows"/>
			<then>
				<property name="os.define" value="_WIN32"/>
				<property name="os.is.windows" value="true"/>
				<if>
					<or>
						<equals arg1="${which.compiler}" arg2="gcc"/>
						<equals arg1="${which.compiler}" arg2="g++"/>
						<equals arg1="${which.compiler}" arg2="c++"/>
					</or>
					<then>
						<property name="using.gcc.on.windows" value="true"/>
					</then>
					<else>
						<property name="using.msvc.on.windows" value="true"/>
					</else>
				</if>
			</then>
			<else>
				<property name="os.define" value="NOTWINDOWS"/>
				<property name="os.is.windows" value="false"/>
			</else>
		</if>
		<if>
			<equals arg1="${debug.mode}" arg2="true"/>
			<then>
				<property name="debug.mode.define" value="_DEBUG"/>
				<property name="output.dir" value="Debug"/>
				<property name="optimize.parm" value="none"/>
				<property name="is.not.release.mode" value="true"/>
				<property name="is.debug.mode" value="true"/>
				<if>
					<or>
						<equals arg1="${which.compiler}" arg2="gcc"/>
						<equals arg1="${which.compiler}" arg2="g++"/>
						<equals arg1="${which.compiler}" arg2="c++"/>
					</or>
					<then>
						<property name="stdcpplib.dir" location="${env.GCC_LIB}/debug"/>
					</then>
				</if>
				<if>
					<equals arg1="${which.linker}" arg2="msvc"/>
					<then>
						<property name="using.msvc.linker" value="true"/>
						<property name="msvc.linker.stdlib" value="msvcrtd"/>
					</then>
				</if>
			</then>
			<else><if><equals arg1="${release.mode}" arg2="true"/><then>
				<property name="debug.mode.define" value="NDEBUG"/>
				<property name="output.dir" value="Release"/>
				<property name="optimize.parm" value="extreme"/>
				<property name="is.release.mode" value="true"/>
				<if>
					<or>
						<equals arg1="${which.compiler}" arg2="gcc"/>
						<equals arg1="${which.compiler}" arg2="g++"/>
						<equals arg1="${which.compiler}" arg2="c++"/>
					</or>
					<then>
						<property name="stdcpplib.dir" location="${env.GCC_LIB}"/>
					</then>
				</if>
				<if>
					<equals arg1="${which.linker}" arg2="msvc"/>
					<then>
						<property name="using.msvc.linker" value="true"/>
						<property name="msvc.linker.stdlib" value="msvcrt"/>
					</then>
				</if>
			</then>
			<else>
				<property name="debug.mode.define" value="NDEBUG"/>
				<property name="output.dir" value="FastCompile"/>
				<property name="optimize.parm" value="none"/>
				<property name="is.not.release.mode" value="true"/>
				<if>
					<or>
						<equals arg1="${which.compiler}" arg2="gcc"/>
						<equals arg1="${which.compiler}" arg2="g++"/>
						<equals arg1="${which.compiler}" arg2="c++"/>
					</or>
					<then>
						<property name="stdcpplib.dir" location="${env.GCC_LIB}"/>
					</then>
				</if>
				<if>
					<equals arg1="${which.linker}" arg2="msvc"/>
					<then>
						<property name="using.msvc.linker" value="true"/>
						<property name="msvc.linker.stdlib" value="msvcrt"/>
					</then>
				</if>
			</else></if></else>
		</if>
		<mkdir dir="${output.dir}"/>
	</target>

	<target name="build" depends="build-init">
		<echo message="Selected compiler = ${which.compiler}.  Selected linker = ${which.linker}"/>
		<cc debug="${debug.mode}" exceptions="true" failonerror="true" incremental="${incremental.compile}" multithreaded="true" name="${which.compiler}" newenvironment="false"
		       optimize="${optimize.parm}" runtime="static" outtype="static" rebuild="false" relentless="false" rtti="true" subsystem="console">

			<compiler id="c.compiler.args">
				<!-- <compilerarg location="mid" value="-print-search-dirs" if="debug.ant.flag"/> -->
				<!-- <compilerarg location="mid" value="-Winline" if="using.gcc"/> -->
				<!-- <compilerarg location="mid" value="-fshort-wchar" if="using.gcc"/>-->
				<!-- <compilerarg location="mid" value="-frepo" if="using.gcc"/> -->
				<compilerarg location="mid" value="-fkeep-static-consts" if="using.gcc"/>
				<compilerarg location="mid" value="-fkeep-inline-functions" if="using.gcc"/>
				<!-- <compilerarg location="mid" value="-ffast-math" if="using.gcc"/> -->
				<compilerarg location="mid" value="-ftrapping-math" if="using.gcc"/>
				<compilerarg location="mid" value="-ftrapv" if="using.gcc"/>
				<compilerarg location="mid" value="-mms-bitfields" if="using.gcc.on.windows"/>
				<compilerarg location="mid" value="-march=i586" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-malign-stringops" if="using.gcc"/>
				<compilerarg location="mid" value="-mfancy-math-387" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-mhard-float" if="using.gcc"/>
				<compilerarg location="mid" value="-mfp-ret-in-387" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-m32" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-mno-mmx" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-mno-3dnow" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-mno-sse" if="using.gcc.on.intel"/>
				<compilerarg location="mid" value="-mno-sse2" if="using.gcc.on.intel"/>
				<!-- <compilerarg location="mid" value="-mno-sse3" if="using.gcc.on.windows"/> -->
				<compilerarg location="mid" value="-fdefault-inline" unless="is.not.release.mode" if="using.gcc"/>
				<compilerarg location="mid" value="-fimplement-inlines" unless="is.not.release.mode" if="using.gcc"/>
				
				<defineset>
                                  <define name="IO_H_IN_SYS_SUBFOLDER" value="true" if="io.h.in.sys"/>
                                  <define name="USE_GLOB_FOR_FIND" value="true" if="glob.h.was.found"/>
                                  <define name="INCLUDE_STAT_H" value="true" if="stat.h.was.found"/>
                                  <define name="_NO_VCL" if="using.bcc"/>
                                  <define name="NO_STRICT" if="using.bcc"/>
                          </defineset>
			</compiler>

			<compiler id="default.compiler.args" extends="c.compiler.args">
				<compilerarg location="mid" value="-fpermissive" if="using.gcc"/>
				<compilerarg location="mid" value="-fconst-strings" if="using.gcc"/>
				<compilerarg location="mid" value="-ftemplate-depth-255" unless="is.not.release.mode" if="using.gcc"/>
				<compilerarg location="mid" value="-minline-all-stringops" unless="is.not.release.mode" if="using.gcc"/>
				<compilerarg location="mid" value="-fimplicit-inline-templates" unless="is.not.release.mode" if="using.gcc"/>
				<compilerarg location="mid" value="-fimplicit-templates" unless="is.not.release.mode" if="using.gcc"/>
				<compilerarg location="mid" value="-felide-constructors" if="using.gcc"/>
				<compilerarg location="mid" value="-fenforce-eh-specs" if="using.gcc"/>
				<compilerarg location="mid" value="-ffor-scope" if="using.gcc"/>
				<compilerarg location="mid" value="-Wnon-virtual-dtor" if="using.gcc"/>
				<compilerarg location="mid" value="-Woverloaded-virtual" if="using.gcc"/>
				<compilerarg location="mid" value="-X-" if="using.bcc"/>                          <!-- enable compiler dependency output? -->
				<compilerarg location="mid" value="-pr" if="using.bcc"/>                          <!-- pascal calling convention? -->
				<compilerarg location="mid" value="-a8" if="using.bcc"/>                          <!-- align 8-byte boundaries -->
				<compilerarg location="mid" value="-b" if="using.bcc"/>                            <!-- make enums int-sized -->
				<compilerarg location="mid" value="-k" if="using.bcc"/>                            <!-- generate stack frames -->
				<compilerarg location="mid" value="-vi" if="using.bcc.debug.mode"/>       <!-- turn on source debugging? -->
				<compilerarg location="mid" value="-s-" if="using.bcc"/>                           <!-- link using the system's incremental linker? -->
				<compilerarg location="mid" value="-q" if="using.bcc"/>                            <!-- suppress the compiler identification banner -->
				<compilerarg location="mid" value="-c" if="using.bcc"/>                            <!-- compiler to object file only, do not link -->
				<compilerarg location="mid" value="-w-8026" if="using.bcc"/>                  <!-- disable annoying warning -->
				<compilerarg location="mid" value="-w-8027" if="using.bcc"/>                  <!-- disable annoying warning -->  
				<compilerarg location="mid" value="-w-8022" if="using.bcc"/>                  <!-- disable annoying warning -->
				<compilerarg location="mid" value="-w-8084" if="using.bcc"/>                  <!-- disable annoying warning -->
				<compilerarg location="mid" value="-w-8010" if="using.bcc"/>                  <!-- disable annoying warning -->
				<compilerarg location="mid" value="-w-8013" if="using.bcc"/>                  <!-- disable annoying warning -->
				<compilerarg location="mid" value="-w-8058" if="using.bcc"/>                  <!-- disable annoying warning -->
				<compilerarg location="mid" value="-w-par" if="using.bcc"/>                    <!-- disable annoying warning -->
				<compilerarg location="mid" value="-pc" if="using.bcc"/>                          <!-- use pascall calling convention? -->
				<compilerarg location="mid" value="-RT" if="using.bcc"/>                          <!-- enable runtime type information -->
			</compiler>
		</cc>
		
		<cc debug="${debug.mode}" exceptions="true" failonerror="true" incremental="${incremental.compile}" multithreaded="true" name="${which.compiler}" newenvironment="false" 
		       optimize="${optimize.parm}" objdir="${output.dir}" outfile="${output.dir}/ceefit" outputfileproperty="ceefit.lib.file" runtime="static" outtype="static" rebuild="false" relentless="false" 
		       rtti="true" subsystem="console">
			
			<defineset>
				<define name="${os.define}"/>
				<define name="${debug.mode.define}"/>
				<define name="_MBCS"/>
				<define name="_LIB"/>
				<define name="_GLIBCXX_USE_WCHAR_T" value="true" if="using.gcc"/>
				<define name="_GLIBCPP_USE_WCHAR_T" value="true" if="using.gcc"/>
				<define name="_GLIBCPP_HAVE_WCTYPE_H" value="true" if="using.gcc"/>
			</defineset>
			<includepath>
				<path>
					<pathelement location="src"/>
					<pathelement location="lib/libunicode-0.4"/>
				</path>
			</includepath>
			<compiler inherit="true" name="${which.compiler}" extends="default.compiler.args">
				<fileset dir="src/ceefit" casesensitive="false">
					<include name="**/*.cpp"/>
				</fileset>
				<fileset dir="src/tools" casesensitive="false">
					<include name="**/*.cpp"/>
				</fileset>
			</compiler>
			<compiler inherit="true" name="${which.compiler}" extends="c.compiler.args">
				<fileset dir="lib/libunicode-0.4" casesensitive="false" unless="using.external.libunicode">
					<include name="*.c"/>
					<exclude name="decomp.*"/>
				</fileset>
			</compiler>
		</cc>
		
		<cc debug="${debug.mode}" exceptions="true" failonerror="true" incremental="${incremental.compile}" multithreaded="true" name="${which.compiler}" newenvironment="false" 
		       optimize="${optimize.parm}" objdir="${output.dir}" outfile="${output.dir}/fat" outputfileproperty="fat.lib.file" runtime="static" outtype="static" rebuild="false" relentless="false" 
		       rtti="true" subsystem="console">
			
			<defineset>
				<define name="${os.define}"/>
				<define name="${debug.mode.define}"/>
				<define name="_MBCS"/>
				<define name="_LIB"/>
			</defineset>
			<includepath>
				<path>
					<pathelement location="src"/>
				</path>
			</includepath>
			<!-- Precompile the core project's headers -->
			<compiler inherit="true" name="${which.compiler}" extends="default.compiler.args">
				<fileset dir="src/fat" casesensitive="false">
					<include name="**/*.cpp"/>
				</fileset>
			</compiler>
		</cc>
		
		<cc debug="${debug.mode}" exceptions="true" failonerror="true" incremental="${incremental.compile}" multithreaded="true" name="${which.compiler}" newenvironment="false"
		       optimize="${optimize.parm}" objdir="${output.dir}" outfile="${output.dir}/fitspec" outputfileproperty="fitspec.exe.file" runtime="static" outtype="executable" rebuild="false" 
		       relentless="false" rtti="true" subsystem="console">
		       
			<defineset>
				<define name="${os.define}"/>
				<define name="${debug.mode.define}"/>
				<define name="_MBCS"/>
			</defineset>
			<includepath>
				<path>
					<pathelement location="src"/>
				</path>
			</includepath>
			<compiler inherit="true" name="${which.compiler}" extends="default.compiler.args">
				<fileset dir="src/fitspec" casesensitive="false">
					<include name="**/*.cpp"/>
				</fileset>
			</compiler>

			<linker inherit="true" incremental="false" debug="${debug.mode}" name="${which.linker}" map="false" rebuild="false">
				<libset dir="${output.dir}" libs="fat" type="static" casesensitive="false"/>
				<libset dir="${output.dir}" libs="ceefit" type="static" casesensitive="false"/>
				<syslibset libs="stdc++,m" type="static" casesensitive="false" if="using.gcc"/>
				<!-- <syslibset libs="kernel32,user32,gdi32,winspool,comdlg32,advapi32,shell32,ole32,oleaut32,uuid,odbc32,odbccp32" type="static" casesensitive="false" if="os.is.windows"/> -->
			</linker>
		</cc>
	</target>

      <target name="test" depends="build">
              <exec executable="${fitspec.exe.file}" dir=".">
                      <arg value="-CeeFIT"/>
                      <arg value="../../spec/index.html"/>
                      <arg value="output/index.html"/>
              </exec>
      </target>
	
      <target name="all" depends="build,test">
      </target>
      
      <target name="make-source-tar">
          <fixcrlf srcdir="." eol="unix" includes="ant,build.properties.example"/>    <!-- make sure that ant has the crlf's turned into just lf's -->
          <tar destfile="${product.name}-src.tar" longfile="gnu">
              <tarfileset dir="."
                              prefix="fit/imp/cpp"
                              preserveLeadingSlashes="false"
                              mode="777">              
                  <include name="ant"/>
              </tarfileset>
              <tarfileset dir="."
                              prefix="fit/imp/cpp"
                              preserveLeadingSlashes="false">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="ant.bat"/>
                  <include name="build.properties.example"/>
                  <include name="doxyfile"/>
                  <include name="*.dsp"/>
                  <include name="*.dsw"/>
                  <include name="*.dev"/>
                  <include name="*.res"/>  <!-- borland c++ builder project file -->
                  <include name="*.bpr"/>  <!-- borland c++ builder project file -->
                  <include name="*.bpf"/>  <!-- borland c++ builder project file -->
                  <include name="*.bpg"/>  <!-- borland c++ builder project file -->
                  <include name="*.dsk"/>  <!-- borland c++ builder project file -->
                  <include name="build.xml"/>
                  <include name="lib/**/*"/>
                  <exclude name="lib/**/classes/**/*"/>
                  <include name="src/**/*"/>
                  <exclude name="**/CVS/**/*"/>
                  <exclude name="**/.cvsignore"/>
                  <exclude name="**/icu/**/*"/>                                    
                  <exclude name="**/*.zip"/>
              </tarfileset>
              <tarfileset dir="../../spec"
                              prefix="fit/spec"
                              preserveLeadingSlashes="false">              
                  <include name="**/*"/>
              </tarfileset>
              <tarfileset dir="../../examples"
                              prefix="fit/examples"
                              preserveLeadingSlashes="false">              
                  <include name="**/*"/>
              </tarfileset>
          </tar>
          <gzip zipfile="${product.name}-src.tar.gz" src="${product.name}-src.tar"/>
          <delete file="${product.name}-src.tar"/>
      </target>

      <target name="make-source-zip">
          <zip destfile="${product.name}-src.zip">
              <zipfileset dir="."
                              prefix="fit/imp/cpp">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="ant"/>
                  <include name="ant.bat"/>
                  <include name="build.properties.example"/>
                  <include name="doxyfile"/>
                  <include name="*.dsp"/>
                  <include name="*.dsw"/>
                  <include name="*.dev"/>
                  <include name="*.res"/>  <!-- borland c++ builder project file -->
                  <include name="*.bpr"/>  <!-- borland c++ builder project file -->
                  <include name="*.bpf"/>  <!-- borland c++ builder project file -->
                  <include name="*.bpg"/>  <!-- borland c++ builder project file -->
                  <include name="*.dsk"/>  <!-- borland c++ builder project file -->
                  <include name="build.xml"/>
                  <include name="lib/**/*"/>
                  <exclude name="lib/**/classes/**/*"/>
                  <exclude name="lib/**/*.jpx*"/>
                  <exclude name="lib/**/.classpath"/>
                  <exclude name="lib/**/.project"/>
                  <include name="src/**/*"/>
                  <exclude name="**/CVS/**/*"/>
                  <exclude name="**/.cvsignore"/>
                  <exclude name="**/icu/**/*"/>                                    
                  <exclude name="**/*.zip"/>
              </zipfileset>
              <zipfileset dir="../../spec"
                              prefix="fit/spec">              
                  <include name="**/*"/>
              </zipfileset>
              <zipfileset dir="../../examples"
                              prefix="fit/examples">              
                  <include name="**/*"/>
              </zipfileset>
          </zip>
      </target>

      <target name="make-docs-zip">
          <zip destfile="${product.name}-doxygen.zip">
              <zipfileset dir="."
                              prefix="fit/imp/cpp">              
                  <include name="docs/**/*"/>
              </zipfileset>
          </zip>
      </target>

      <target name="make-mingw-win32-bin-zip">
          <zip destfile="${product.name}-mingw-win32-bin.zip">
              <zipfileset dir="."
                              prefix="fit/imp/cpp">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="src/**/*.h"/>
                  <include name="Debug/**/*"/>
                  <include name="Release/**/*"/>
                  <include name="FastCompile/**/*"/>
                  <exclude name="**/*.o"/>
                  <exclude name="**/history.xml"/>
                  <exclude name="**/dependencies.xml"/>
              </zipfileset>
              <zipfileset dir="../../spec"
                              prefix="fit/spec">              
                  <include name="**/*"/>
              </zipfileset>
          </zip>
      </target>

      <target name="make-msvc60-win32-bin-zip">
          <zip destfile="${product.name}-msvc60-win32-bin.zip">
              <zipfileset dir="."
                              prefix="fit/imp/cpp">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="src/**/*.h"/>
                  <include name="Debug/**/*"/>
                  <include name="Release/**/*"/>
                  <include name="FastCompile/**/*"/>
                  <exclude name="**/*.obj"/>
                  <exclude name="**/*.pch"/>
                  <exclude name="**/*.idb"/>
                  <exclude name="**/history.xml"/>
                  <exclude name="**/dependencies.xml"/>
              </zipfileset>
              <zipfileset dir="../../spec"
                              prefix="fit/spec">              
                  <include name="**/*"/>
              </zipfileset>
              <zipfileset dir="../../examples"
                              prefix="fit/examples">              
                  <include name="**/*"/>
              </zipfileset>
          </zip>
      </target>

      <target name="make-bcb6-win32-bin-zip">
          <zip destfile="${product.name}-bcb6-win32-bin.zip">
              <zipfileset dir="."
                              prefix="fit/imp/cpp">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="src/**/*.h"/>
                  <include name="Debug/**/*"/>
                  <include name="Release/**/*"/>
                  <include name="FastCompile/**/*"/>
                  <exclude name="**/*.obj"/>
                  <exclude name="**/*.pch"/>
                  <exclude name="**/*.idb"/>
                  <exclude name="**/history.xml"/>
                  <exclude name="**/dependencies.xml"/>
              </zipfileset>
              <zipfileset dir="../../spec"
                              prefix="fit/spec">              
                  <include name="**/*"/>
              </zipfileset>
              <zipfileset dir="../../examples"
                              prefix="fit/examples">              
                  <include name="**/*"/>
              </zipfileset>
          </zip>
      </target>

      <target name="make-gcc-linux-intel-bin-tar">
          <tar destfile="${product.name}-gcc-linux-intel-bin.tar.gz" longfile="gnu" compression="gzip">
              <tarfileset dir="." prefix="fit/imp/cpp">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="src/**/*.h"/>
                  <include name="Debug/**"/>
                  <include name="Release/**"/>
                  <include name="FastCompile/**"/>
                  <exclude name="**/*.o"/>
                  <exclude name="**/history.xml"/>
                  <exclude name="**/dependencies.xml"/>
              </tarfileset>
              <tarfileset dir="../../spec" prefix="fit/spec">              
                  <include name="**/*"/>
              </tarfileset>
          </tar>
      </target>

      <target name="make-CC-solaris-intel-bin-tar">
          <tar destfile="${product.name}-CC-solaris-intel-bin.tar" longfile="gnu">
              <tarfileset dir="."
                              prefix="fit/imp/cpp"
                              preserveLeadingSlashes="false">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="src/**/*.h"/>
                  <include name="Debug/**/*"/>
                  <include name="Release/**/*"/>
                  <include name="FastCompile/**/*"/>
                  <exclude name="**/*.o"/>
                  <exclude name="**/history.xml"/>
                  <exclude name="**/dependencies.xml"/>
              </tarfileset>
              <tarfileset dir="../../spec"
                              prefix="fit/spec"
                              preserveLeadingSlashes="false">              
                  <include name="**/*"/>
              </tarfileset>
          </tar>
          <gzip zipfile="${product.name}-CC-solaris-intel-bin.tar.gz" src="${product.name}-CC-solaris-intel-bin.tar"/>
          <delete file="${product.name}-CC-solaris-intel-bin.tar"/>
      </target>

      <target name="make-CC-solaris-sparc-bin-tar">
          <tar destfile="${product.name}-CC-solaris-sparc-bin.tar" longfile="gnu">
              <tarfileset dir="."
                              prefix="fit/imp/cpp"
                              preserveLeadingSlashes="false">              
                  <include name="LICENSE*"/>
                  <include name="README*"/>
                  <include name="src/**/*.h"/>
                  <include name="Debug/**/*"/>
                  <include name="Release/**/*"/>
                  <include name="FastCompile/**/*"/>
                  <exclude name="**/*.o"/>
                  <exclude name="**/history.xml"/>
                  <exclude name="**/dependencies.xml"/>
              </tarfileset>
              <tarfileset dir="../../spec"
                              prefix="fit/spec"
                              preserveLeadingSlashes="false">              
                  <include name="**/*"/>
              </tarfileset>
          </tar>
          <gzip zipfile="${product.name}-CC-solaris-sparc-bin.tar.gz" src="${product.name}-CC-solaris-sparc-bin.tar"/>
          <delete file="${product.name}-CC-solaris-sparc-bin.tar"/>
      </target>
</project>
